library("swirl")
swirl()
5 + 7
x <- 5 + 7
x
y <- x -3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
swirl()
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq = seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_Ch
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Kisalay")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep=" ")
c(1:3, c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
swirl()
x <- c(44,NA,5,NA)
x *3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample (c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[cC(-2,-10)]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar = 2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical (vect,vect2)
vect["bar"]
vect[c("foo","bar")]
packages.search(KernSmooth)
install.packages(KernSmooth)
a <- available.packages()
install.packages("KernSmooth")
library(KernSmooth)
x <- matrix(1:6, 2, 3)
x[]
x[[]]
args args(lm)
args(lm)
search()
librart(swirl)
library(swirl)
search()
f <- function(x,y) { x * y / z }
f(4,5)
tm <- sys.time()
tm <- Sys.time()
tm
p <- as.POSIXlt(tm)
p
names(p)
names(tm)
names(unclass(p))
p$sec
p$mon
p$year
p$mday
p$wday
p$yday
p$min
p$hour
p$zone
p$isdst
tm <- Sys.time()
p <- as.POSIXlt(tm)
p$mon
tm
?POSIXlt
x <- 1:10
if(x > 5) {
x <- 0
}
x > 5
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
d n= 3L
d <- 3L
d
cube <- function(x, n) {
x^3
}
cube(3)
swirl()
library(swirl)
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- C("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
cbind(my_matrix, patients)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE)  == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!( 5 == 7 )
!5 == !7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE (6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_Colors <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_col)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[[2]])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
flags$landmass
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
bV <- makeVector(1:10)
bV$get
bV$get()
class(bV$get())
debugonce(ls)
ls()
debug(ls)
ls()
undebug(ls)
library("swirl")
swirl()
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,prob=c(0.3,0.7))
flips <- sample(0:1,100,prob=c(0.3,0.7))
flips <- sample(0:1,100,prob=c(0.3,0.7), replace=TRUE)
flips <- sample(c(0,1),100,prob=c(0.3,0.7), replace=TRUE)
flips
sum(flips == 1)
sum(flips)
?rbinom
rbinom(1, 100, 0.7)
flips2 <- rbinom(1, 100, 0.7)
flips2 <- rbinom(100, 1, 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t2)
weekdays(d1
)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B, %d, %Y %H:%M")
t4 <- strptime(t3, "%B, %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
getwd
getwd()
getwd()
setwd('C:/Users/Kisalay/Documents/GitHub/ProgrammingAssignment2')
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$getinv()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinv()
